#define COL(x)     (x & 7)
#define ROW(x)     (x >> 3)
#define MAX_PLY    16
#define WHITE      0
#define BLACK      1
#define PAWN       0
#define KNIGHT     1
#define BISHOP     2
#define ROOK       3
#define QUEEN      4
#define KING       5
#define EMPTY      6

typedef struct move {
  char from;
  char to;
  char piece;
  char target;
} move_t;

typedef enum {
  false = 0,
  true  = 1
} bool;

int     search(int alpha, int beta, int depth);
void    generate_moves();
void    add_move(int from, int to);
void    swap_sides();
bool    make_move(move_t *m);
void    unmake_move(move_t *m);
int     evaluate();
bool    in_check();
void    print_board();
int     main();

move_t  moves[64000];
int     on_move[MAX_PLY];
int     m_from;
int     m_to;
int     ply;
int     nodes;
int     piece_rank[2]    =  { 7, 0};
int     pawn_rank[2]     =  { 6, 1};
int     promote_rank[2]  =  { 0, 7};
int     material[6]      =  { 10, 31, 32, 52, 91, 3570};
int     nsteps[6]        =  { 0, 8, 4, 4, 8, 8};
int     up[2]            =  {-8, 8};
int     kings[2]         =  {60, 4};
int     mx               =  WHITE;
int     mn               =  BLACK;

int colors[64] = {
   1,  1,  1,  1,  1,  1,  1,  1,
   1,  1,  1,  1,  1,  1,  1,  1,
   6,  6,  6,  6,  6,  6,  6,  6,
   6,  6,  6,  6,  6,  6,  6,  6,
   6,  6,  6,  6,  6,  6,  6,  6,
   6,  6,  6,  6,  6,  6,  6,  6,
   0,  0,  0,  0,  0,  0,  0,  0,
   0,  0,  0,  0,  0,  0,  0,  0
};

int pieces[64] = {
   3,  1,  2,  4,  5,  2,  1,  3,
   0,  0,  0,  0,  0,  0,  0,  0,
   6,  6,  6,  6,  6,  6,  6,  6,
   6,  6,  6,  6,  6,  6,  6,  6,
   6,  6,  6,  6,  6,  6,  6,  6,
   6,  6,  6,  6,  6,  6,  6,  6,
   0,  0,  0,  0,  0,  0,  0,  0,
   3,  1,  2,  4,  5,  2,  1,  3
};

char piece_types[2][7] = {
  { 'P', 'N', 'B', 'R', 'Q', 'K', '.' },
  { 'p', 'n', 'b', 'r', 'q', 'k', '.' }
};

int pst[64] = {
   -4, -3, -2, -1, -1, -2, -3, -4,
   -3, -2, -1,  0,  0, -1, -2, -3,
   -2, -1,  1,  1,  1,  1, -1, -2,
   -1,  0,  2,  3,  3,  2,  0, -1,
   -1,  0,  2,  3,  3,  2,  0, -1,
   -2, -1,  1,  1,  1,  1, -1, -2,
   -3, -2, -1,  0,  0, -1, -2, -3,
   -4, -3, -2, -1, -1, -2, -3, -4
};

int SQ64[64] = {
  21, 22, 23, 24, 25, 26, 27, 28,
  31, 32, 33, 34, 35, 36, 37, 38,
  41, 42, 43, 44, 45, 46, 47, 48,
  51, 52, 53, 54, 55, 56, 57, 58,
  61, 62, 63, 64, 65, 66, 67, 68,
  71, 72, 73, 74, 75, 76, 77, 78,
  81, 82, 83, 84, 85, 86, 87, 88,
  91, 92, 93, 94, 95, 96, 97, 98
};

int SQ120[120] = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
   -1,  0,  1,  2,  3,  4,  5,  6,  7, -1,
   -1,  8,  9, 10, 11, 12, 13, 14, 15, -1,
   -1, 16, 17, 18, 19, 20, 21, 22, 23, -1,
   -1, 24, 25, 26, 27, 28, 29, 30, 31, -1,
   -1, 32, 33, 34, 35, 36, 37, 38, 39, -1,
   -1, 40, 41, 42, 43, 44, 45, 46, 47, -1,
   -1, 48, 49, 50, 51, 52, 53, 54, 55, -1,
   -1, 56, 57, 58, 59, 60, 61, 62, 63, -1,
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
};

int steps[6][8] = {
  {  0,  0,  0,  0,  0,  0,  0,  0},
  {-21,-19,-12, -8,  8, 12, 19, 21},
  {-11, -9,  9, 11,  0,  0,  0,  0},
  {-10, -1,  1, 10,  0,  0,  0,  0},
  {-11, -9,  9, 11,-10, -1,  1, 10},
  {-11, -9,  9, 11,-10, -1,  1, 10}
};
